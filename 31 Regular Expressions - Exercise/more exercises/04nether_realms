import re


def health_calculation(input_data):
    health_str = ''
    pattern = r'([A-z]*)([^\+\-\/\*\.\,\d])'
    extracting = re.findall(pattern, input_data)
    if extracting:
        for groups in extracting:
            for letters in groups:
                health_str += letters
        health = sum(ord(i) for i in health_str)
        return health
    else:
        return None


def base_damage(input_data):
    damage_total = 0
    pattern = r'(\-?)([0-9]+(\.[0-9]+)*)'
    extracting = re.findall(pattern, input_data)
    if not extracting:
        return 0
    for damage in extracting:
        if damage[0] == '-':
            damage_total -= float(damage[1])
        else:
            damage_total += float(damage[1])
    return damage_total


def boost_decrease(input_data, value):
    factor = ''
    new_dagame = value
    pattern = r'(\*+|\/+)'
    extracting = re.findall(pattern, input_data)
    for symbol in extracting:
        for sym in symbol:
            factor += sym
    for index in factor:
        if '*' == index:
            new_dagame = new_dagame * 2
        else:
            new_dagame = new_dagame / 2
    return new_dagame


demon_names = (''.join(input().split())).split(',')
demons = {}
for demon in demon_names:
    health = health_calculation(demon)
    if health is None:
        continue
    damage = base_damage(demon)
    if ('*' in demon or '/' in demon) and damage != 0:
        damage = boost_decrease(demon, damage)
    demons[demon] = [health, damage]
for name in sorted(demons):
    print(f"{name} - {demons[name][0]} health, {demons[name][1]:.2f} damage")
    
  

#################################### TASK CONDITION ############################
4.	Nether Realms
Mighty battle is coming. In the stormy nether realms, demons are fighting against each
other for supremacy in a duel from which only one will survive. 
Your job, however is not so exciting. You are assigned to sign in all the participants 
in the nether realm's mighty battle's demon book, which of course is sorted alphabetically. 
A demon's name contains his health and his damage. 
The sum of the asci codes of all characters (excluding numbers (0-9), arithmetic 
ymbols ('+', '-', '*', '/') and delimiter dot ('.')) gives a demon's total health. 
The sum of all numbers in his name forms his base damage. Note that you should consider
the plus '+' and minus '-' signs (e.g. +10 is 10 and -10 is -10). However, there are 
some symbols ('*' and '/') that can further alter the base damage by multiplying or
dividing it by 2 (e.g. in the name "m15*/c-5.0", the base damage is 15 + (-5.0) = 10 and 
then you need to multiply it by 2 (e.g. 10 * 2 = 20) and then divide it by 2 (e.g. 20 / 2 = 10)). 
So, multiplication and division are applied only after all numbers are included 
in the calculation and in the order they appear in the name. 
You will get all demons on a single line, separated by commas and zero or more blank spaces. 
Sort them in alphabetical order and print their names along their health and damage. 
Input
The input will be read from the console. The input consists of a single line containing 
all demon names separated by commas and zero or more spaces in the format: "{demon name}, {demon name}, … {demon name}"
Output
Print all demons sorted by their name in ascending order, each on a separate line in the format:
•	"{demon name} - {health points} health, {damage points} damage"
Constraints
•	A demon's name will contain at least one character
•	A demon's name cannot contain blank spaces ' ' or commas ','
•	A floating point number will always have digits before and after its decimal separator
•	Number in a demon's name is considered everything that is a valid integer or floating 
point number (with dot '.' used as separator). For example, all these are valid numbers: '4', '+4', '-4', '3.5', '+3.5', '-3.5' 

____________________________________________________________________________________________
Example_01

Input
M3ph-0.5s-0.5t0.0**	

Output
M3ph-0.5s-0.5t0.0** - 524 health, 8.00 damage	

Explanation
M3ph-0.5s-0.5t0.0**:
Health = 'M' + 'p' + 'h' + 's' + 't' = 524 health.
Damage = (3 + (-0.5) + (-0.5) + 0.0) * 2 * 2 = 8 damage.

____________________________________________________________________________________________
Example_02

Input
M3ph1st0**, Azazel	

Output
Azazel - 615 health, 0.00 damage 
M3ph1st0** - 524 health, 16.00 damage

Explanation
	Azazel: 
Health - 'A' + 'z' + 'a' + 'z' + 'e' + 'l' = 615 health. Damage - no digits = 0 damage.

M3ph1st0**:
Health - 'M' + 'p' + 'h' + 's' + 't' = 524 health.
Damage - (3 + 1 + 0) * 2 * 2 = 16 damage.

____________________________________________________________________________________________
Example_03

Input
Gos/ho	

Output
Gos/ho - 512 health, 0.00 damage	

